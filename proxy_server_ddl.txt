CREATE DATABASE proxy_server

CREATE TABLE `requests` (
    `event_id` int(11) NOT NULL AUTO_INCREMENT,
    `timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `IP_address` varchar(20) NOT NULL,
    `request` varchar(255)  NOT NULL,
    `length` int(11) NOT NULL,
    `response_time` decimal(7,4) NOT NULL,a
    PRIMARY KEY (`event_id`)
)
AUTO_INCREMENT=1 ;


CREATE TABLE `web_cache` (
    `timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `filename` int(11) NOT NULL,
    `url` varchar(255) NOT NULL,
    PRIMARY KEY (`filename`)
)


1)

see pics



2)

In CSMA/CD, there is a possibility than an error message may be sent back to the sender so the contention interval should be 2 times the signal propagation time.

min frame size = (2 * (10 km / 500000 km/s) * 100Gbps * 10^9) / (8 bits)
               = 500000 bytes



4)

see pic

As seen in the diagram above, the ethernet and token ring frame formats are very similar, specifically they share the same destination address, source address, service access point, logical link control information, and data. When converting from token ring to ethernet, the protocol conversion bridge will have to compute the length field for the ethernet frame, since token-ring frames do not possess a length field. The routing information field (RIF) is also removed from the frame during the conversion and may be cached at the bridge for use in populating fields of frames travelling in the opposite direction (ethernet to token-ring). Likewise, when converting from ethernet to token ring, the bridge will have to compute the RIF field and remove the length field (which it can also cache). The protocol conversion bridge may have to perform similar computations to alter or add in new frame bits for either protocol.

5a)

For each of the questions, the link layer frame is a nested form of the packets from previous layers

preamble    destination MAC     source MAC      type        Data        CRC

Sync           dd                   aa          UDP App     Network     error correction
bits                                                        Packet          bits


The data portion of the ethernet frame contains a network layer packet

Source IP       Destination IP      Protocol    Data
1.1             2.2                 UDP         Transport Packet

The data portion of the network layer packet contains the transport layer packet which itself contains the true data we want to send from A to E

Source Port     Destination Port    Data
    2401                1608        HELLO



b)

preamble    destination MAC     source MAC      type        Data        CRC

Sync           hh                   gg          UDP App     Network     error correction
bits                                                        Packet          bits


The data portion of the ethernet frame contains a network layer packet

Source IP       Destination IP      Protocol    Data
1.1             2.2                 UDP         Transport Packet

The data portion of the network layer packet contains the transport layer packet which itself contains the true data we want to send from A to E

Source Port     Destination Port    Data
    2401                1608        HELLO



c)

preamble    destination MAC     source MAC      type        Data        CRC

Sync           ee                   kk          UDP App     Network     error correction
bits                                                        Packet          bits


The data portion of the ethernet frame contains a network layer packet

Source IP       Destination IP      Protocol    Data
1.1             2.2                 UDP         Transport Packet

The data portion of the network layer packet contains the transport layer packet which itself contains the true data we want to send from A to E

Source Port     Destination Port    Data
    2401                1608        HELLO



6a)

No. The host E will not ask the router R1 for information on F. Since E and F are in the same subnet, they are effectively in the same local area network. Thus E will not ask router R1 for help routing traffic to F, since E and F are on the same LAN and can communicate via the link layer switch connecting them. The source and destination IP for E and F are different, except for their most signifcant bits that make up the routing prefix. The prefix is the same for both, since theyre on the same subnet. E and F also have different MAC addresses which allows the link layer switch to differentiate between them

b)

No, E will not perform an APR query to find B's MAC address. Since E and B are on different LAN's, E has no information about B's MAC address. The router will handle this translation. The source and destination IP are the IP addresses of E and B respectively. The source MAC address is that of E while the destination MAC is that of the link between router R1 and subnet 3.

c)

A will broadcast an ARP request message and switch S1 will receive the message. Since it didn't previously have information on A, it will add A's MAC/IP mapping to its ARP table. Since S1 doesn't know anything about host B, it broadcasts A's ARP request on all it's links, causing router R1 to receive the ARP request from A as well. However, the router R1 will not forward the request since its other links are to subnet 2 and 3, which are in different LAN's where the ARP query from subnet 1 is meaningless. B will not send another query for the MAC address of A because when A originally broadcast the ARP request for B's MAC adress, B also received the ARP request and stores A's IP/MAC address mapping in its ARP cache. Since S1 broadcast A's ARP request, B will also receive an ARP request from S1. B then sends back an ARP response to S1, which updates its ARP table to reflect B's MAC/IP mapping. 



7a)

L is in bytes
encoding rate = 128000 bits/sec
=> packetization delay = ((L * 8) / 128000) sec
                       = ((L * 8) / 128) milliseconds

b)

packetization delay = ((1500 * 8) / 128) milliseconds
                    = 93.75 milliseconds

packetization delay = ((50 * 8) / 128) milliseconds
                    = 3.125 milliseconds


c) 

store and forward delay = (1500 * 8) / (622 * 10^6)
                        = 1.93 * 10^ -5 sec
                        = 0.0193 milliseconds

store and forward delay = (50 * 8) / (622 * 10^6)
                        = 6.43 * 10^-7 sec
                        = 6.43 * 10^-4 milliseconds

d) Small packet size, like 50 bytes, allows for shorter packetization delay. If the packet were larger, say 1500 bytes, packetization delay goes up to 93.75 milliseconds, which is greater than the acceptable 20 msec. Thus a larger packet size like 1500 bytes would cause noticable and unpleasant echo in VOIP communication.




8a)

100% - 99.9% = 0.1 % of the time for both video and email apps

b)

If A and B are independent events,
P(A and B) = P(A) * P(B)
           = (0.1 %) ^ 2
           = 1 * 10 ^ -6

c) Figure 6.31 describes a fully connected topology. This allows each of the n tier-2 links to have a connection to each of the n tier-1 links, i.e. n^2 connections. This allows higher bandwidth for intra-application traffic and we can effectively get rid of one of the racks for a total of 7. We know that it is acceptable for there to be a shortage of servers 0.001 % = 10^-5 of the time. The two apps are only active at the same time with probability 10^-6, which is less than 10^-5 and within the acceptable 0.001% chance of server shortage. Thus a shortage of servers scenario is very rare and would only occur if both applications are so busy they they both request the extra 7th rack (only happens with probability 10^-6).  



